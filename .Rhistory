devtools::document()
usethis::use_testthat()
usethis::use_test("hello")
test_that("hello prints correctly", {
expect_output(hello(), "Hello, world!")
})
devtools::test()\
devtools::test()
devtools::build()
devtools::build()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
os <- Sys.info()[["sysname"]]
os
Sys.info()
os <- Sys.info()[["sysname"]]
exe_name <- switch(
os,
"Linux"   = "ldak6.1.linux",
"Darwin"  = "ldak6.1.mac",
"Windows" = "ldak6.1.exe",
stop("Unsupported OS: ", os)
)
exe_name
exe_path <- system.file("bin", exe_name, package = "LDAK")
if (exe_path == "") {
stop("Could not find the LDAK binary for your OS.")
}
exe_path
if (os != "Windows") {
Sys.chmod(exe_path, mode = "755")
}
exit_code <- system2(exe_path, args = args, stdout = "", stderr = "")
exit_code <- system2(exe_path, args = args, stdout = "", stderr = "")
if (exit_code != 0) {
stop("LDAK execution failed with exit code ", exit_code)
}
exit_code
exe_path
exe_path
?system2
args = ""
exit_code <- system2(exe_path, args = args, stdout = "", stderr = "")
devtools::build()
devtools::check()
devtools::build()
devtools::check()
devtools::check()
devtools::build()
devtools::build()
devtools::check()
library(LDAK)
ldak()
devtools::build()
devtools::check()
devtools::check()
devtools::check()
librar(LDAK)
library(LDAK)
ldak()
ldak(" ")
size = 5
(1:(size-1))/size
cov = rnorm(1000)
c(0,as.numeric(cov), (1:(size-1))/size, na.rm = T), Inf)
c(-Inf,quantile(as.numeric(cov), (1:(size-1))/size, na.rm = T), Inf)
?cut
quants_group <- sapply(1:length(quints), function(i) as.numeric(age_quints == i))\
a = c(0,1, NA)
all(a %in% c(0,1))
all(a %in% c(0,1), na.rm=T)
a
?all
a %in% c(0,1)
a %in% c(0,1, NA)
size
(2 * (1:size)-1))/(2*size)
(2 * (1:size)-1)/(2*size)
# test random code
# Simulated data
set.seed(123)
x <- seq(0, 10, length.out = 100)
y <- sin(x) + rnorm(100, 0, 0.2)  # noisy sine curve
# Define internal knots for the spline
knots <- c(3, 6, 8)
# Build the quadratic spline design matrix
X <- cbind(1, x, x^2)
for (k in knots) {
X <- cbind(X, pmax(0, x - k)^2)  # truncated quadratic terms
}
# Fit the linear model
fit <- lm(y ~ X - 1)  # -1 to avoid double intercept
# Predict fitted values
y_pred <- predict(fit)
# Plot the results
plot(x, y, main = "Base R Quadratic Spline Fit", xlab = "x", ylab = "y", pch = 16)
lines(x, y_pred, col = "red", lwd = 2)
abline(v = knots, col = "blue", lty = 2)  # show knot locations
legend("topright", legend = c("Data", "Quadratic Spline", "Knots"),
col = c("black", "red", "blue"), pch = c(16, NA, NA), lty = c(NA, 1, 2))
# Simulated data
set.seed(123)
x <- seq(0, 10, length.out = 100)
y <- 3 + 2*x - 0.5*x^2 + rnorm(100, 0, 2)  # true quadratic with noise
# Fit quadratic regression
fit <- lm(y ~ x + I(x^2))
# Predict fitted values
y_pred <- predict(fit)
# Plot
plot(x, y, main = "Quadratic Fit", xlab = "x", ylab = "y", pch = 16)
lines(x, y_pred, col = "red", lwd = 2)
y = c(0.1,0.3,0.2,0.5,0.5)
y
x
quants_medians
quants_medians <- (2 * (1:size)-1)/(2*size)
quants_medians <- (2 * (1:size)-1)/(2*size)
quants_medians
fit <- lm(y ~ quants_medians + I(quants_medians^2))
fit
summary(fit)
# Predict fitted values
y_pred <- predict(fit)
# Plot
plot(x, y, main = "Quadratic Fit", xlab = "x", ylab = "y", pch = 16)
# Simulated data
set.seed(123)
x <- quants_medians
y <- c(0.1,0.3,0.2,0.5,0.5)
# Fit quadratic regression
fit <- lm(y ~ x + I(x^2))
# Predict fitted values
y_pred <- predict(fit)
# Plot
plot(x, y, main = "Quadratic Fit", xlab = "x", ylab = "y", pch = 16)
lines(x, y_pred, col = "red", lwd = 2)
rank(c(4,2,3,5,6))
quantile(c(4,2,3,5,6))
cov_cases = rnorm(100)
(2 * rank(cov_cases) - 1) / (2 * max(rank(cov_cases)))
cov_cases = rnorm(10)
(2 * rank(cov_cases) - 1) / (2 * max(rank(cov_cases)))
plot((2 * rank(cov_cases) - 1) / (2 * max(rank(cov_cases))), cov_cases)
y <- as.numeric(trans[i,])
devtools::build()
devtools::check()
devtools::build()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::build()
devtools::check()
library(stats)
?smooth.spline
library(devtools)
devtools::build()
devtools::check()
devtools::build()
devtools::check()
?smooth.spline
